import std::stack
import std::cmp

defx + (U8 U8 -> U8)
defx + (U16 U16 -> U16)
defx + (U32 U32 -> U32)
defx + (U64 U64 -> U64)
defx + (U128 U128 -> U128)
defx + (I8 I8 -> I8)
defx + (I16 I16 -> I16)
defx + (I32 I32 -> I32)
defx + (I64 I64 -> I64)
defx + (I128 I128 -> I128)

defx - (U8 U8 -> U8)
defx - (U16 U16 -> U16)
defx - (U32 U32 -> U32)
defx - (U64 U64 -> U64)
defx - (U128 U128 -> U128)
defx - (I8 I8 -> I8)
defx - (I16 I16 -> I16)
defx - (I32 I32 -> I32)
defx - (I64 I64 -> I64)
defx - (I128 I128 -> I128)

defx * (U8 U8 -> U8)
defx * (U16 U16 -> U16)
defx * (U32 U32 -> U32)
defx * (U64 U64 -> U64)
defx * (U128 U128 -> U128)
defx * (I8 I8 -> I8)
defx * (I16 I16 -> I16)
defx * (I32 I32 -> I32)
defx * (I64 I64 -> I64)
defx * (I128 I128 -> I128)

defx / (U8 U8 -> U8)
defx / (U16 U16 -> U16)
defx / (U32 U32 -> U32)
defx / (U64 U64 -> U64)
defx / (U128 U128 -> U128)
defx / (I8 I8 -> I8)
defx / (I16 I16 -> I16)
defx / (I32 I32 -> I32)
defx / (I64 I64 -> I64)
defx / (I128 I128 -> I128)

defx % (U8 U8 -> U8)
defx % (U16 U8 -> U8)
defx % (U16 U16 -> U16)
defx % (U32 U8 -> U8)
defx % (U32 U16 -> U16)
defx % (U32 U32 -> U32)
defx % (U64 U8 -> U8)
defx % (U64 U16 -> U16)
defx % (U64 U32 -> U32)
defx % (U64 U64 -> U64)
defx % (U128 U8 -> U8)
defx % (U128 U16 -> U16)
defx % (U128 U32 -> U32)
defx % (U128 U64 -> U64)
defx % (U128 U128 -> U128)
defx % (I8 I8 -> I8)
defx % (I16 I8 -> I8)
defx % (I16 I16 -> I16)
defx % (I32 I8 -> I8)
defx % (I32 I16 -> I16)
defx % (I32 I32 -> I32)
defx % (I64 I8 -> I8)
defx % (I64 I16 -> I16)
defx % (I64 I32 -> I32)
defx % (I64 I64 -> I64)
defx % (I128 I8 -> I8)
defx % (I128 I16 -> I16)
defx % (I128 I32 -> I32)
defx % (I128 I64 -> I64)
defx % (I128 I128 -> I128)

def abs (I128 -> I128) {
    dup 0i128 < if { -1i128 * } else { touch }
}
def abs (I8 -> I8) {
    dup 0i8 < if { -1i8 * } else { touch }
}
